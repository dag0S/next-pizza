import { categories, ingredients, products } from "./constants";
import { prisma } from "./prisma-client";
import { hashSync } from "bcrypt";

// –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ü–µ–Ω—ã
const randomNumber = (min: number, max: number) => {
  return Math.floor(Math.random() * (max - min) * 10 + min * 10) / 10;
};

// –≥–µ–Ω—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
async function up() {
  await prisma.user.createMany({
    data: [
      {
        fullName: "User Test",
        email: "user@test.ru",
        password: hashSync("123123", 10),
        verified: new Date(),
        role: "USER",
      },
      {
        fullName: "Admin Test",
        email: "admin@test.ru",
        password: hashSync("123123", 10),
        verified: new Date(),
        role: "ADMIN",
      },
    ],
  });

  await prisma.category.createMany({
    data: categories,
  });

  await prisma.ingredient.createMany({
    data: ingredients,
  });

  await prisma.product.createMany({
    data: products,
  });

  const pizza1 = await prisma.product.create({
    data: {
      name: "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏ —Ñ—Ä–µ—à",
      imageUrl: "/pizzas/pepperoni-fresh.avif",
      categoryId: 1,
      ingredients: {
        connect: ingredients.slice(0, 5),
      },
    },
  });

  const pizza2 = await prisma.product.create({
    data: {
      name: "–°—ã—Ä–Ω–∞—è",
      imageUrl: "/pizzas/cheese.avif",
      categoryId: 1,
      ingredients: {
        connect: ingredients.slice(5, 10),
      },
    },
  });

  const pizza3 = await prisma.product.create({
    data: {
      name: "–ß–æ—Ä–∏–∑–æ —Ñ—Ä–µ—à",
      imageUrl: "/pizzas/—Åhorizo‚Äã-fresh.avif",
      categoryId: 1,
      ingredients: {
        connect: ingredients.slice(10, 40),
      },
    },
  });

  const pizza4 = await prisma.product.create({
    data: {
      name: "–í–µ—Ç—á–∏–Ω–∞ –∏ —Å—ã—Ä",
      imageUrl: "/pizzas/pizza-4.avif",
      categoryId: 1,
      ingredients: {
        connect: ingredients.slice(10, 40),
      },
    },
  });

  const pizza5 = await prisma.product.create({
    data: {
      name: "–ê—Ä—Ä–∏–≤–∞!",
      imageUrl: "/pizzas/pizza-5.avif",
      categoryId: 1,
      ingredients: {
        connect: ingredients.slice(10, 12),
      },
    },
  });

  const pizza6 = await prisma.product.create({
    data: {
      name: "–ß–µ—Ç—ã—Ä–µ —Å–µ–∑–æ–Ω–∞",
      imageUrl: "/pizzas/pizza-6.avif",
      categoryId: 1,
      ingredients: {
        connect: ingredients.slice(0, 11),
      },
    },
  });

  const pizza7 = await prisma.product.create({
    data: {
      name: "–ñ—é–ª—å–µ–Ω",
      imageUrl: "/pizzas/pizza-7.avif",
      categoryId: 1,
      ingredients: {
        connect: ingredients.slice(2, 7),
      },
    },
  });

  const pizza8 = await prisma.product.create({
    data: {
      name: "–°—ã—Ä–Ω—ã–π —Ü—ã–ø–ª–µ–Ω–æ–∫",
      imageUrl: "/pizzas/pizza-8.avif",
      categoryId: 1,
      ingredients: {
        connect: ingredients.slice(2, 7),
      },
    },
  });

  const pizza9 = await prisma.product.create({
    data: {
      name: "–î–∏–∞–±–ª–æ üå∂Ô∏èüå∂Ô∏è",
      imageUrl: "/pizzas/pizza-9.avif",
      categoryId: 1,
      ingredients: {
        connect: ingredients.slice(2, 7),
      },
    },
  });

  const pizza10 = await prisma.product.create({
    data: {
      name: "–ì–∞–≤–∞–π—Å–∫–∞—è",
      imageUrl: "/pizzas/pizza-10.avif",
      categoryId: 1,
      ingredients: {
        connect: ingredients.slice(2, 5),
      },
    },
  });

  await prisma.productItem.createManyAndReturn({
    data: [
      // –ü–µ–ø–ø–µ—Ä–æ–Ω–∏ —Ñ—Ä–µ—à
      {
        productId: pizza1.id,
        pizzaType: 1,
        size: 20,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza1.id,
        pizzaType: 2,
        size: 30,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza1.id,
        pizzaType: 2,
        size: 40,
        price: randomNumber(190, 600),
      },
      // –°—ã—Ä–Ω–∞—è
      {
        productId: pizza2.id,
        pizzaType: 1,
        size: 20,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza2.id,
        pizzaType: 1,
        size: 30,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza2.id,
        pizzaType: 1,
        size: 40,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza2.id,
        pizzaType: 2,
        size: 20,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza2.id,
        pizzaType: 2,
        size: 30,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza2.id,
        pizzaType: 2,
        size: 40,
        price: randomNumber(190, 600),
      },
      // –ß–æ—Ä–∏–∑–æ —Ñ—Ä–µ—à
      {
        productId: pizza3.id,
        pizzaType: 1,
        size: 20,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza3.id,
        pizzaType: 2,
        size: 30,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza3.id,
        pizzaType: 2,
        size: 40,
        price: randomNumber(190, 600),
      },
      // –í–µ—Ç—á–∏–Ω–∞ –∏ —Å—ã—Ä
      {
        productId: pizza4.id,
        pizzaType: 1,
        size: 20,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza4.id,
        pizzaType: 2,
        size: 30,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza4.id,
        pizzaType: 2,
        size: 40,
        price: randomNumber(190, 600),
      },
      // –ê—Ä—Ä–∏–≤–∞!
      {
        productId: pizza5.id,
        pizzaType: 1,
        size: 20,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza5.id,
        pizzaType: 2,
        size: 30,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza5.id,
        pizzaType: 2,
        size: 40,
        price: randomNumber(190, 600),
      },
      // –ß–µ—Ç—ã—Ä–µ —Å–µ–∑–æ–Ω–∞
      {
        productId: pizza6.id,
        pizzaType: 1,
        size: 20,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza6.id,
        pizzaType: 2,
        size: 30,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza6.id,
        pizzaType: 2,
        size: 40,
        price: randomNumber(190, 600),
      },
      // –ñ—é–ª—å–µ–Ω
      {
        productId: pizza7.id,
        pizzaType: 1,
        size: 20,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza7.id,
        pizzaType: 2,
        size: 30,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza7.id,
        pizzaType: 2,
        size: 40,
        price: randomNumber(190, 600),
      },
      // –°—ã—Ä–Ω—ã–π —Ü—ã–ø–ª–µ–Ω–æ–∫
      {
        productId: pizza8.id,
        pizzaType: 1,
        size: 20,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza8.id,
        pizzaType: 2,
        size: 30,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza8.id,
        pizzaType: 2,
        size: 40,
        price: randomNumber(190, 600),
      },
      // –î–∏–∞–±–ª–æ
      {
        productId: pizza9.id,
        pizzaType: 1,
        size: 20,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza9.id,
        pizzaType: 2,
        size: 30,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza9.id,
        pizzaType: 2,
        size: 40,
        price: randomNumber(190, 600),
      },
      // –ì–∞–≤–∞–π—Å–∫–∞—è
      {
        productId: pizza10.id,
        pizzaType: 1,
        size: 20,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza10.id,
        pizzaType: 2,
        size: 30,
        price: randomNumber(190, 600),
      },
      {
        productId: pizza10.id,
        pizzaType: 2,
        size: 40,
        price: randomNumber(190, 600),
      },
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
      {
        productId: 1,
        price: randomNumber(190, 600),
      },
      {
        productId: 2,
        price: randomNumber(190, 600),
      },
      {
        productId: 3,
        price: randomNumber(190, 600),
      },
      {
        productId: 4,
        price: randomNumber(190, 600),
      },
      {
        productId: 5,
        price: randomNumber(190, 600),
      },
      {
        productId: 6,
        price: randomNumber(190, 600),
      },
      {
        productId: 7,
        price: randomNumber(190, 600),
      },
      {
        productId: 8,
        price: randomNumber(190, 600),
      },
      {
        productId: 9,
        price: randomNumber(190, 600),
      },
      {
        productId: 10,
        price: randomNumber(190, 600),
      },
      {
        productId: 11,
        price: randomNumber(190, 600),
      },
      {
        productId: 12,
        price: randomNumber(190, 600),
      },
      {
        productId: 13,
        price: randomNumber(190, 600),
      },
      {
        productId: 14,
        price: randomNumber(190, 600),
      },
      {
        productId: 15,
        price: randomNumber(190, 600),
      },
      {
        productId: 16,
        price: randomNumber(190, 600),
      },
      {
        productId: 17,
        price: randomNumber(190, 600),
      },
    ],
  });

  await prisma.cart.createMany({
    data: [
      {
        userId: 1,
        totalAmount: 0,
        token: "111",
      },
      {
        userId: 2,
        totalAmount: 0,
        token: "222",
      },
    ],
  });

  await prisma.cartItem.create({
    data: {
      productItemId: 1,
      cartId: 2,
      quantity: 1,
      ingredients: {
        connect: [{ id: 1 }, { id: 2 }, { id: 3 }],
      },
    },
  });

  await prisma.story.createMany({
    data: [
      {
        previewImageUrl: "/stories/story-1.webp",
      },
      {
        previewImageUrl: "/stories/story-2.webp",
      },
      {
        previewImageUrl: "/stories/story-3.webp",
      },
      {
        previewImageUrl: "/stories/story-4.webp",
      },
      {
        previewImageUrl: "/stories/story-5.webp",
      },
      {
        previewImageUrl: "/stories/story-6.webp",
      },
    ],
  });

  await prisma.storyItem.createMany({
    data: [
      {
        storyId: 1,
        sourceUrl: "/storyItems/story-1-1.webp",
      },
      {
        storyId: 1,
        sourceUrl: "/storyItems/story-1-2.webp",
      },
      {
        storyId: 1,
        sourceUrl: "/storyItems/story-1-3.webp",
      },
      {
        storyId: 1,
        sourceUrl: "/storyItems/story-1-4.webp",
      },
      {
        storyId: 1,
        sourceUrl: "/storyItems/story-1-5.webp",
      },
    ],
  });
}

// —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function down() {
  await prisma.$executeRaw`TRUNCATE TABLE "User" RESTART IDENTITY CASCADE`;
  await prisma.$executeRaw`TRUNCATE TABLE "Category" RESTART IDENTITY CASCADE`;
  await prisma.$executeRaw`TRUNCATE TABLE "Product" RESTART IDENTITY CASCADE`;
  await prisma.$executeRaw`TRUNCATE TABLE "ProductItem" RESTART IDENTITY CASCADE`;
  await prisma.$executeRaw`TRUNCATE TABLE "Ingredient" RESTART IDENTITY CASCADE`;
  await prisma.$executeRaw`TRUNCATE TABLE "Cart" RESTART IDENTITY CASCADE`;
  await prisma.$executeRaw`TRUNCATE TABLE "CartItem" RESTART IDENTITY CASCADE`;
  await prisma.$executeRaw`TRUNCATE TABLE "Story" RESTART IDENTITY CASCADE`;
  await prisma.$executeRaw`TRUNCATE TABLE "StoryItem" RESTART IDENTITY CASCADE`;
}

async function main() {
  try {
    await down();
    await up();
  } catch (e) {
    console.error(e);
  }
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });
